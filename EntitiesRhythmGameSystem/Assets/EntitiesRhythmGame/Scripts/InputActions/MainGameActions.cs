//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/InputActions/MainGameActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MainGameActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MainGameActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MainGameActions"",
    ""maps"": [
        {
            ""name"": ""Main"",
            ""id"": ""7477083d-f12e-438e-81a2-fa71f061af1c"",
            ""actions"": [
                {
                    ""name"": ""Lane0"",
                    ""type"": ""Button"",
                    ""id"": ""857a0a8d-6d5d-45ad-b394-a5d0a46ead96"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Lane1"",
                    ""type"": ""Button"",
                    ""id"": ""36a04e8d-96fd-4a78-876d-c5763609f26f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Lane2"",
                    ""type"": ""Button"",
                    ""id"": ""1e52fe97-56b0-4f7f-81b3-88e23ea8d001"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Lane3"",
                    ""type"": ""Button"",
                    ""id"": ""bddd36c7-aebd-47b5-b173-961fa3dae005"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""69cae1d0-5462-498e-8a81-be930cf93ab1"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lane0"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e0b77ebf-1eb6-45f3-847d-fed057bee0cd"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lane1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b3dc832f-8cd1-419b-b30e-2197107594cb"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lane2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6cecfe32-e01d-4e37-a0b2-71930aba6d7b"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lane3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Main
        m_Main = asset.FindActionMap("Main", throwIfNotFound: true);
        m_Main_Lane0 = m_Main.FindAction("Lane0", throwIfNotFound: true);
        m_Main_Lane1 = m_Main.FindAction("Lane1", throwIfNotFound: true);
        m_Main_Lane2 = m_Main.FindAction("Lane2", throwIfNotFound: true);
        m_Main_Lane3 = m_Main.FindAction("Lane3", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Main
    private readonly InputActionMap m_Main;
    private List<IMainActions> m_MainActionsCallbackInterfaces = new List<IMainActions>();
    private readonly InputAction m_Main_Lane0;
    private readonly InputAction m_Main_Lane1;
    private readonly InputAction m_Main_Lane2;
    private readonly InputAction m_Main_Lane3;
    public struct MainActions
    {
        private @MainGameActions m_Wrapper;
        public MainActions(@MainGameActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Lane0 => m_Wrapper.m_Main_Lane0;
        public InputAction @Lane1 => m_Wrapper.m_Main_Lane1;
        public InputAction @Lane2 => m_Wrapper.m_Main_Lane2;
        public InputAction @Lane3 => m_Wrapper.m_Main_Lane3;
        public InputActionMap Get() { return m_Wrapper.m_Main; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainActions set) { return set.Get(); }
        public void AddCallbacks(IMainActions instance)
        {
            if (instance == null || m_Wrapper.m_MainActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MainActionsCallbackInterfaces.Add(instance);
            @Lane0.started += instance.OnLane0;
            @Lane0.performed += instance.OnLane0;
            @Lane0.canceled += instance.OnLane0;
            @Lane1.started += instance.OnLane1;
            @Lane1.performed += instance.OnLane1;
            @Lane1.canceled += instance.OnLane1;
            @Lane2.started += instance.OnLane2;
            @Lane2.performed += instance.OnLane2;
            @Lane2.canceled += instance.OnLane2;
            @Lane3.started += instance.OnLane3;
            @Lane3.performed += instance.OnLane3;
            @Lane3.canceled += instance.OnLane3;
        }

        private void UnregisterCallbacks(IMainActions instance)
        {
            @Lane0.started -= instance.OnLane0;
            @Lane0.performed -= instance.OnLane0;
            @Lane0.canceled -= instance.OnLane0;
            @Lane1.started -= instance.OnLane1;
            @Lane1.performed -= instance.OnLane1;
            @Lane1.canceled -= instance.OnLane1;
            @Lane2.started -= instance.OnLane2;
            @Lane2.performed -= instance.OnLane2;
            @Lane2.canceled -= instance.OnLane2;
            @Lane3.started -= instance.OnLane3;
            @Lane3.performed -= instance.OnLane3;
            @Lane3.canceled -= instance.OnLane3;
        }

        public void RemoveCallbacks(IMainActions instance)
        {
            if (m_Wrapper.m_MainActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMainActions instance)
        {
            foreach (var item in m_Wrapper.m_MainActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MainActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MainActions @Main => new MainActions(this);
    public interface IMainActions
    {
        void OnLane0(InputAction.CallbackContext context);
        void OnLane1(InputAction.CallbackContext context);
        void OnLane2(InputAction.CallbackContext context);
        void OnLane3(InputAction.CallbackContext context);
    }
}
